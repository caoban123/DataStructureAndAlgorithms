class HashNode:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.left = None
        self.right = None
        self.height = 1
class AVL:
    def get_height(self, root):
        return 0 if not root else root.height
    def get_balance(self, root):
        if not root:
            return 0
        else:
            return self.get_height(root.left) - self.get_height(root.right)
    def right_rotate(self, root):
        new_root = root.left
        temp = new_root.right
        new_root.right = root
        root.left = temp
        root.height = 1 + max(self.get_height(root.left), self.get_height(root.right))
        new_root.height = 1 + max(self.get_height(new_root.left), self.get_height(new_root.right))
        return new_root
    
    def left_rotate(self, root):
        new_root = root.right
        temp = new_root.left
        new_root.left = root
        root.right = temp
        root.height = 1 + max(self.get_height(root.left), self.get_height(root.right))
        new_root.height = 1 + max(self.get_height(new_root.left), self.get_height(new_root.right))
        return new_root
    def insert(self, root, key, value):
        if not root:
            return HashNode(key, value)
        if key < root.key:
            root.left = self.insert(root.left, key, value)
        elif key > root.key:
            root.right = self.insert(root.right, key, value)
        else:
            root.value = value
            return root
        root.height = 1 + max(self.get_height(root.left), self.get_height(root.right))    
        balanced = self.get_balance(root)
        if balanced > 1 and key < root.left.key:
            return self.right_rotate(root)
        if balanced > 1 and key > root.left.key:
            root.left = self.left_rotate(root.left)
            return self.right_rotate(root)
        if balanced < -1 and key > root.right.key:
            return self.left_rotate(root)
        if balanced < -1 and key < root.right.key:
            root.right = self.right_rotate(root.right)
            return self.left_rotate(root)
        return root
    def search(self, root, key):
        if root is None:
            return None
        else:
            if key < root.key:
                return self.search(root.left, key)
            elif key > root.key:
                return self.search(root.right, key)
            elif key == root.key:
                return root.value
            return None
    def get_max_value(self, root):
        if root is None:
            return
        while root.right:
            root = root.right
        return root
    def delete(self, root, key):
        if root is None:
            return 
        if key < root.key:
            root.left = self.delete(root.left, key)
        elif key > root.key:
            root.right = self.delete(root.right, key)
        else:
            if not root.left:
                return root.right
            if not root.right:
                return root.left
            max_value = self.get_max_value(root.left)
            root.key = max_value.key
            root.left = self.delete(root.left, max_value.key)
        root.height = 1 + max(self.get_height(root.left), self.get_height(root.right))
        balanced = self.get_balance(root)
        if balanced > 1 and self.get_balance(root.left) >= 0:
            return self.right_rotate(root)
        if balanced > 1 and self.get_balance(root.left) < 0:
            root.left = self.left_rotate(root.left)
            return self.right_rotate(root)
        if balanced < -1 and self.get_balance(root.right) <= 0:
            return self.left_rotate(root)
        if balanced < -1 and self.get_balance(root.right) > 0:
            root.right = self.right_rotate(root.right)
            return self.left_rotate(root)
        return root
    def print_tree(self, root, level = 1, prefix = "Root: "):
        if root is not None:
            self.print_tree(root.right, level + 1, "R--")
            print("       " * level + prefix + root.key + f" {root.value}")
            self.print_tree(root.left, level + 1, "L--")
class HashTable:
    def __init__(self, HashSize):
        self.capacity = HashSize
        self.table = [None] * self.capacity
        self.avl = AVL()
    def __del__(self):
        self.table = [None] * self.capacity
    def _hash(self, key):
        return hash(key) % self.capacity
    def add(self, key, value):
        index = self._hash(key)
        self.table[index] = self.avl.insert(self.table[index], key, value)
    def search(self, key):
        index = self._hash(key)
        return self.avl.search(self.table[index], key)
    def delete(self, key):
        index = self._hash(key)
        self.table[index] = self.avl.delete(self.table[index], key)
    def print_table(self):
        for i in range(self.capacity):
            print(f"index {i} :")

            self.avl.print_tree(self.table[i])
if __name__ == "__main__":
    ht = HashTable(10)

    ht.add("apple", 3)
    ht.add("banana", 5)
    ht.add("cherry", 10)
    ht.add("x", 10)
    ht.add("xs", 10)
    ht.add("xa", 10)
    ht.add("x", 10)

    print("apple:", ht.search("apple"))   # 3
    print("banana:", ht.search("banana")) # 5
    print("grape:", ht.search("grape"))   # None

    ht.add("banana", 8)
    print("banana (updated):", ht.search("banana")) # 8

    ht.delete("apple")
    print("apple (after deletion):", ht.search("apple")) # None
    ht.print_table()




    
            
    
